<?php

namespace App\Controller\Admin;

use App\Controller\StatsController;
use App\Entity\Decision;
use App\Entity\Status;
use App\Repository\DecisionRepository;
use App\Service\EmailSender;
use DateTimeImmutable;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\EntityManagerInterface;
use EasyCorp\Bundle\EasyAdminBundle\Config\Action;
use EasyCorp\Bundle\EasyAdminBundle\Config\Actions;
use EasyCorp\Bundle\EasyAdminBundle\Config\Crud;
use EasyCorp\Bundle\EasyAdminBundle\Context\AdminContext;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Field\ArrayField;
use EasyCorp\Bundle\EasyAdminBundle\Field\AssociationField;
use EasyCorp\Bundle\EasyAdminBundle\Field\CollectionField;
use EasyCorp\Bundle\EasyAdminBundle\Field\DateTimeField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextEditorField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;
use EasyCorp\Bundle\EasyAdminBundle\Router\AdminUrlGenerator;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\UX\Chartjs\Builder\ChartBuilderInterface;
use Symfony\UX\Chartjs\Model\Chart;

class DecisionCrudController extends AbstractCrudController
{
    public static function getEntityFqcn(): string
    {
        return Decision::class;
    }

    public function configureFields(string $pageName): iterable
    {
        return [
//            IdField::new('id'),
            TextField::new('title'),
            TextEditorField::new('description'),
            AssociationField::new('status'),
            AssociationField::new('category'),
            DateTimeField::new('createdAt')
                ->hideOnForm(),
        ];
    }

//    public function configureActions(Actions $actions): Actions
//    {
//        $lateStatusAction = Action::new('late')
//            ->setTemplatePath('admin/late_decision.html.twig')
//            ->linkToCrudAction('late')
//            ->addCssClass('btn btn-success')
//            ->setIcon('fa fa-check-circle')
//            ->displayAsButton();
//        return parent::configureActions($actions)
//            ->add(Crud::PAGE_DETAIL, $lateStatusAction);
//    }

    public function lateStatusUpdate(
        AdminContext $adminContext,
        EntityManagerInterface $manager,
        EmailSender $emailSender
    ): Response {
        $decision = null;
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            foreach ($_POST['checkeboxe'] as $value) {
                $decision = $manager->getRepository(Decision::class)->findOneBy(['id' => $value]);
                $decision->setStatus($manager->getRepository(Status::class)->findOneBy(['name' => 'Late decision']));
                $manager->persist($decision);
            }
            $manager->flush();
            $emailSender->emailDecisionStatusSetLate(
                $decision->getAuthor()->getEmail(),
                $decision->getAuthor()->getFirstname(),
                $decision->getAuthor()->getLastname(),
                $decision->getSlug()
            );
            $this->addFlash('success', 'Decisions updated successfully');
        }

        $todayDate = new DateTimeImmutable();
        $startedDecisions = $manager->getRepository(Decision::class)->findLateStartedDecision($manager, $todayDate);
        $firstDecisions = $manager->getRepository(Decision::class)->findLateFirstDecision($manager, $todayDate);
        return $this->render('admin/late_decisions.html.twig', [
            'startedDecisions' => $startedDecisions,
            'firstDecisions' => $firstDecisions
        ]);
    }

    #[Route('/admin/stats', name: 'statistics_admin')]
    public function displayStats(EntityManagerInterface $manager, ChartBuilderInterface $chartBuilder): Response
    {
        return $this->render('admin/statistics.html.twig', [
            'multiplePieChart' => (new StatsController())->multipleChartPie(
                $manager->getRepository(Decision::class),
                $chartBuilder
            ),
            'pieChart' => (new StatsController())->chartPie($chartBuilder, $manager->getRepository(Decision::class)),
            'barChart' => (new StatsController())->barChart($chartBuilder, $manager->getRepository(Decision::class)),
        ]);
    }

    public function configureCrud(Crud $crud): Crud
    {
//        return parent::configureCrud($crud); // TODO: Change the autogenerated stub
        return $crud
            ->setPaginatorPageSize(10);
    }
}
